process{
    withName: SOMALIER_EXTRACT{
        publishDir = [
            path: { "${params.outdir}/somalier/extract" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }
    withName: SOMALIER_RELATE{
        ext.args = {'--infer'}
        publishDir = [
            path: { "${params.outdir}/somalier/relate" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName:PICARD_CROSSCHECKFINGERPRINTS{
        ext.args = '--EXIT_CODE_WHEN_MISMATCH 0 --CROSSCHECK_BY SAMPLE --EXPECT_ALL_GROUPS_TO_MATCH true'
        publishDir = [
            path: { "${params.outdir}/fingerprints" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}